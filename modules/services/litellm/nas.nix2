{ config, lib, pkgs, ... }:
let
  domain = "litellm.bepis.lol";
  portKey = "litellm";
  # Generate a YAML config for LiteLLM (no DB settings inside; DB via env)
  yamlFormat = pkgs.formats.yaml { };
  litellmConfig = yamlFormat.generate "litellm-config.yaml" {
    litellm_settings = {
      drop_params = true;
    };
    model_list = [
      {
        model_name = "gpt-3.5-turbo";
        litellm_params = {
          model = "openai/gpt-3.5-turbo";
          api_key = "os.environ/OPENAI_API_KEY";
        };
      }
      {
        model_name = "o3";
        litellm_params = {
          model = "openai/o3";
          api_key = "os.environ/OPENAI_API_KEY";
        };
      }
      {
        model_name = "gpt-5-mini";
        litellm_params = {
          model = "openai/gpt-5";
          api_key = "os.environ/OPENAI_API_KEY";
        };
      }
      {
        model_name = "gpt-5";
        litellm_params = {
          model = "openai/gpt-5";
          api_key = "os.environ/OPENAI_API_KEY";
        };
      }
      {
        model_name = "claude-sonnet-4";
        litellm_params = {
          model = "anthropic/claude-sonnet-4-20250514";
          api_key = "os.environ/ANTHROPIC_API_KEY";
        };
      }
      {
        model_name = "claude-opus-4";
        litellm_params = {
          model = "anthropic/claude-opus-4-20250514";
          api_key = "os.environ/ANTHROPIC_API_KEY";
        };
      }
      {
        model_name = "claude-3-5-haiku";
        litellm_params = {
          model = "anthropic/claude-3-5-haiku-20241022";
          api_key = "os.environ/ANTHROPIC_API_KEY";
        };
      }
      {
        model_name = "gemini-2.5-flash";
        litellm_params = {
          model = "gemini/gemini-2.5-flash-preview-04-17";
          api_key = "os.environ/GOOGLE_API_KEY";
        };
      }
      {
        model_name = "gemini-2.5-pro";
        litellm_params = {
          model = "gemini/gemini-2.5-pro-preview-05-06";
          api_key = "os.environ/GOOGLE_API_KEY";
        };
      }
    ];
  };
  internalPort = 4000; # LiteLLM container defaults to 4000
in
{
  custom.ports.requests = [ { key = portKey; } ];

  hostedServices = [
    {
      inherit domain;
      upstreamHost = "127.0.0.1";
      upstreamPort = toString config.custom.ports.assigned.${portKey};
      tailnet = true;
    }
  ];

  virtualisation.oci-containers = {
    containers."litellm" = {
      image = "ghcr.io/berriai/litellm:latest";
      autoStart = true;
      ports = [
        "127.0.0.1:${toString config.custom.ports.assigned.${portKey}}:${toString internalPort}"
      ];
      environmentFiles = [
        config.sops.secrets."litellm/env".path
        config.sops.secrets."litellm/db_env".path
      ];
      volumes = [
        "${litellmConfig}:/app/config.yaml:ro"
      ];
      cmd = [
        "--config=/app/config.yaml"
      ];
    };
  };

  # Make sure the SOPS secrets exist
  sops.secrets = {
    "litellm/env" = { };
    "litellm/db_env" = { };
    "litellm/db_password" = {
      mode = "0600";
      owner = "postgres";
      group = "postgres";
    };
  };

  # Host-managed Postgres for LiteLLM state
  services.postgresql = {
    enable = true;
    ensureDatabases = [ "litellm" ];
    ensureUsers = [
      {
        name = "litellm";
        ensureDBOwnership = true;
      }
    ];
    # pg_hba: allow TCP only for litellm user to litellm DB, use scram
    authentication = lib.mkForce ''
      # TYPE  DATABASE  USER      ADDRESS          METHOD
      local   all       all                        peer
      host    litellm   litellm   127.0.0.1/32     scram-sha-256
      host    litellm   litellm   ::1/128          scram-sha-256
    '';
  };

  # One-shot: set/refresh DB password from SOPS secret
  systemd.services."litellm-db-init" = {
    description = "Initialize LiteLLM database role password";
    after = [ "postgresql.service" ];
    requires = [ "postgresql.service" ];
    wantedBy = [ "multi-user.target" ];
    serviceConfig = {
      Type = "oneshot";
      User = "postgres";
      ExecStart = "${pkgs.writeShellScript "set-litellm-password" ''
        set -euo pipefail

        PWD_FILE=${lib.escapeShellArg config.sops.secrets."litellm/db_password".path}
        PASS=$(${pkgs.coreutils}/bin/tr -d "\n" < "$PWD_FILE")
        ${pkgs.postgresql}/bin/psql -v ON_ERROR_STOP=1 -tAc "ALTER ROLE litellm WITH LOGIN PASSWORD '$PASS';"
      ''}";
    };
  };

  # Start container after DB is ready and password is set
  systemd.services."podman-litellm" = {
    after = [ "postgresql.service" "network-online.target" "litellm-db-init.service" ];
    requires = [ "postgresql.service" "litellm-db-init.service" ];
  };

  # Explicitly disable the native service to avoid conflicts
  services.litellm.enable = lib.mkForce false;
}
